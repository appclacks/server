// Code generated by mockery v2.41.0. DO NOT EDIT.

package pushgateway

import (
	context "context"

	aggregates "github.com/appclacks/server/pkg/pushgateway/aggregates"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CleanPushgatewayMetrics provides a mock function with given fields: ctx
func (_m *MockStore) CleanPushgatewayMetrics(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanPushgatewayMetrics")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CleanPushgatewayMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanPushgatewayMetrics'
type MockStore_CleanPushgatewayMetrics_Call struct {
	*mock.Call
}

// CleanPushgatewayMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) CleanPushgatewayMetrics(ctx interface{}) *MockStore_CleanPushgatewayMetrics_Call {
	return &MockStore_CleanPushgatewayMetrics_Call{Call: _e.mock.On("CleanPushgatewayMetrics", ctx)}
}

func (_c *MockStore_CleanPushgatewayMetrics_Call) Run(run func(ctx context.Context)) *MockStore_CleanPushgatewayMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_CleanPushgatewayMetrics_Call) Return(_a0 int64, _a1 error) *MockStore_CleanPushgatewayMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CleanPushgatewayMetrics_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockStore_CleanPushgatewayMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdatePushgatewayMetric provides a mock function with given fields: ctx, metric, cumulative
func (_m *MockStore) CreateOrUpdatePushgatewayMetric(ctx context.Context, metric aggregates.PushgatewayMetric, cumulative bool) (string, error) {
	ret := _m.Called(ctx, metric, cumulative)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdatePushgatewayMetric")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregates.PushgatewayMetric, bool) (string, error)); ok {
		return rf(ctx, metric, cumulative)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aggregates.PushgatewayMetric, bool) string); ok {
		r0 = rf(ctx, metric, cumulative)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, aggregates.PushgatewayMetric, bool) error); ok {
		r1 = rf(ctx, metric, cumulative)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateOrUpdatePushgatewayMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdatePushgatewayMetric'
type MockStore_CreateOrUpdatePushgatewayMetric_Call struct {
	*mock.Call
}

// CreateOrUpdatePushgatewayMetric is a helper method to define mock.On call
//   - ctx context.Context
//   - metric aggregates.PushgatewayMetric
//   - cumulative bool
func (_e *MockStore_Expecter) CreateOrUpdatePushgatewayMetric(ctx interface{}, metric interface{}, cumulative interface{}) *MockStore_CreateOrUpdatePushgatewayMetric_Call {
	return &MockStore_CreateOrUpdatePushgatewayMetric_Call{Call: _e.mock.On("CreateOrUpdatePushgatewayMetric", ctx, metric, cumulative)}
}

func (_c *MockStore_CreateOrUpdatePushgatewayMetric_Call) Run(run func(ctx context.Context, metric aggregates.PushgatewayMetric, cumulative bool)) *MockStore_CreateOrUpdatePushgatewayMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aggregates.PushgatewayMetric), args[2].(bool))
	})
	return _c
}

func (_c *MockStore_CreateOrUpdatePushgatewayMetric_Call) Return(_a0 string, _a1 error) *MockStore_CreateOrUpdatePushgatewayMetric_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateOrUpdatePushgatewayMetric_Call) RunAndReturn(run func(context.Context, aggregates.PushgatewayMetric, bool) (string, error)) *MockStore_CreateOrUpdatePushgatewayMetric_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllPushgatewayMetrics provides a mock function with given fields: ctx
func (_m *MockStore) DeleteAllPushgatewayMetrics(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllPushgatewayMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteAllPushgatewayMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllPushgatewayMetrics'
type MockStore_DeleteAllPushgatewayMetrics_Call struct {
	*mock.Call
}

// DeleteAllPushgatewayMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) DeleteAllPushgatewayMetrics(ctx interface{}) *MockStore_DeleteAllPushgatewayMetrics_Call {
	return &MockStore_DeleteAllPushgatewayMetrics_Call{Call: _e.mock.On("DeleteAllPushgatewayMetrics", ctx)}
}

func (_c *MockStore_DeleteAllPushgatewayMetrics_Call) Run(run func(ctx context.Context)) *MockStore_DeleteAllPushgatewayMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_DeleteAllPushgatewayMetrics_Call) Return(_a0 error) *MockStore_DeleteAllPushgatewayMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteAllPushgatewayMetrics_Call) RunAndReturn(run func(context.Context) error) *MockStore_DeleteAllPushgatewayMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMetricByID provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteMetricByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMetricByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteMetricByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetricByID'
type MockStore_DeleteMetricByID_Call struct {
	*mock.Call
}

// DeleteMetricByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStore_Expecter) DeleteMetricByID(ctx interface{}, id interface{}) *MockStore_DeleteMetricByID_Call {
	return &MockStore_DeleteMetricByID_Call{Call: _e.mock.On("DeleteMetricByID", ctx, id)}
}

func (_c *MockStore_DeleteMetricByID_Call) Run(run func(ctx context.Context, id string)) *MockStore_DeleteMetricByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_DeleteMetricByID_Call) Return(_a0 error) *MockStore_DeleteMetricByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteMetricByID_Call) RunAndReturn(run func(context.Context, string) error) *MockStore_DeleteMetricByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMetricsByName provides a mock function with given fields: ctx, name
func (_m *MockStore) DeleteMetricsByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMetricsByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteMetricsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetricsByName'
type MockStore_DeleteMetricsByName_Call struct {
	*mock.Call
}

// DeleteMetricsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStore_Expecter) DeleteMetricsByName(ctx interface{}, name interface{}) *MockStore_DeleteMetricsByName_Call {
	return &MockStore_DeleteMetricsByName_Call{Call: _e.mock.On("DeleteMetricsByName", ctx, name)}
}

func (_c *MockStore_DeleteMetricsByName_Call) Run(run func(ctx context.Context, name string)) *MockStore_DeleteMetricsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_DeleteMetricsByName_Call) Return(_a0 error) *MockStore_DeleteMetricsByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteMetricsByName_Call) RunAndReturn(run func(context.Context, string) error) *MockStore_DeleteMetricsByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function with given fields: ctx
func (_m *MockStore) GetMetrics(ctx context.Context) ([]*aggregates.PushgatewayMetric, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 []*aggregates.PushgatewayMetric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*aggregates.PushgatewayMetric, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*aggregates.PushgatewayMetric); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregates.PushgatewayMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockStore_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetMetrics(ctx interface{}) *MockStore_GetMetrics_Call {
	return &MockStore_GetMetrics_Call{Call: _e.mock.On("GetMetrics", ctx)}
}

func (_c *MockStore_GetMetrics_Call) Run(run func(ctx context.Context)) *MockStore_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetMetrics_Call) Return(_a0 []*aggregates.PushgatewayMetric, _a1 error) *MockStore_GetMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetMetrics_Call) RunAndReturn(run func(context.Context) ([]*aggregates.PushgatewayMetric, error)) *MockStore_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
